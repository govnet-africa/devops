env:
  DOCKERFILE_BUILDER_IMG: eclipse-temurin:${{ inputs.java-version }}-jdk
  DOCKERHUB_REPO: ${{ inputs.dockerhub-org }}/${{ inputs.service }}
  DOCKER_BUILDKIT: 1
on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        default: null
      java-platform:
        required: false
        type: string
        default: 'linux/amd64'
      java-version:
        required: false
        type: string
        default: '20'
      java-distribution:
        required: false
        type: string
        default: 'temurin'
      jre-cache:
        required: false
        type: string
        default: 'maven'
      service:
        required: true
        type: string
      service-port:
        required: false
        type: number
        default: 8080
      dockerhub-org:
        required: false
        type: string
        default: 'gfsekamanya'
      dockerfile-runner-img:
        required: false
        type: string
        default: 'eclipse-temurin:${{ inputs.java-version }}-jre'
      spring-profile:
        required: false
        type: string
        default: 'staging'
jobs:
  java-build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - name: Set env
      run: |
        echo "GITHUB_SHA_SHORT=`git rev-parse --short ${{ github.sha }}`" >> $GITHUB_ENV
        echo "GITHUB_BRANCH_SHORT=`git branch --show-current | sed 's/\//_/g' | tr -d ' '`" >> $GITHUB_ENV
        echo "DOCKERHUB_REPO=${{ inputs.dockerhub-org }}/$(echo ${{ inputs.service }} | cut -d '/' -f 2)" >> $GITHUB_ENV
        echo "SERVICE_BUILD=`date -I`-`git rev-parse --short ${{ github.sha }}`" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: gfsekamanya
        password: 'dckr_pat_9T7EjEsmKQIrZ2SOgNEo8RdUc7o'
    - name: Setup JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        cache: ${{ inputs.jre-cache }}
    - name: cleanup configuration
      run: |
        echo "todo: clean up configuration files"
    - name: Build with ${{ inputs.jre-cache }}
      run: |
        rm -rf target && \
        mvn -B package --file pom.xml -DskipTests && \
        mkdir -p target/{dependency,extracted} && \
        (cd target/dependency; jar -xf ../*.jar) && \
        java -Djarmode=layertools -jar target/*.jar extract --destination target/extracted 
    - name: Write Dockerfile
      env:
        JRE_HOME: /opt/jre
      run: |
        cat <<EOF > Dockerfile 
        FROM --platform=${{inputs.java-platform}} ${{ env.DOCKERFILE_BUILDER_IMG }} as builder
        USER root
        RUN jlink \
          --module-path "$JAVA_HOME/jmods" \
          --add-modules java.compiler,java.sql,java.naming,java.management,java.instrument,java.rmi,java.desktop,jdk.internal.vm.compiler.management,java.xml.crypto,java.scripting,java.security.jgss,jdk.httpserver,java.net.http,jdk.naming.dns,jdk.crypto.cryptoki,jdk.unsupported \
          --verbose \
          --strip-debug \
          --compress 2 \
          --no-header-files \
          --no-man-pages \
          --output /opt/jre-minimal
        USER app
        WORKDIR /app
        COPY target target
        FROM  --platform=${{inputs.java-platform}} ${{ inputs.dockerfile-runner-img }}
        VOLUME /tmp
        COPY --from=builder /app/target/extracted/dependencies/ ./
        COPY --from=builder /app/target/extracted/spring-boot-loader/ ./
        COPY --from=builder /app/target/extracted/snapshot-dependencies/ ./
        COPY --from=builder /app/target/extracted/application/ ./
        COPY --from=builder /opt/jre-minimal ${{ env.JRE_HOME }}
        ENV JAVA_HOME=${{ env.JRE_HOME }}
        ENV PATH="$PATH:$JAVA_HOME/bin"
        ENV APP_PORT=${{ inputs.service-port }}
        ENV BUILD=${{ env.SERVICE_BUILD }}
        ENV VERSION=${{ inputs.service }}-${{ inputs.version || env.GITHUB_SHA_SHORT }}
        EXPOSE ${{ inputs.service-port }}
        RUN sed -i 's/\/bin\/ash/\/sbin\/nologin/g' /etc/passwd
        ENTRYPOINT ["${{ env.JRE_HOME }}/bin/java", "-Djava.security.egd=file:/prod/./urandom", "org.springframework.boot.loader.JarLauncher", "--spring.profiles.active=${{inputs.spring-profile}}"]
        EOF
    - name: Set docker branch tag
      run: |
        echo "GITHUB_BRANCH_SHORT=`git branch --show-current | sed 's/\//_/g' | tr -d ' '`" >> $GITHUB_ENV
    - name: Build and push docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
          ${{ env.DOCKERHUB_REPO }}:${{ env.SERVICE_BUILD }}
          ${{ env.DOCKERHUB_REPO }}:${{ inputs.version || env.GITHUB_SHA_SHORT }}
          ${{ env.DOCKERHUB_REPO }}:latest