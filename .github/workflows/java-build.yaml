
env:
  COMMIT_SHA: $(git rev-parse --short ${{ github.sha }})
on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        default: null
      java-version:
        required: false
        type: string
        default: '17'
      java-distribution:
        required: false
        type: string
        default: 'temurin'
      jre-cache:
        required: false
        type: string
        default: 'maven'
      service:
        required: true
        type: string
      service-port:
        required: false
        type: number
        default: 8080
jobs:
  java-build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - name: Setup JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        cache: ${{ inputs.jre-cache }}
    - name: Build with ${{ inputs.jre-cache }}
      run: mvn -B package --file pom.xml -DskipTests
    - name: Write Dockerfile
      run: |
        cat <<EOF > Dockerfile 
        FROM eclipse-temurin:17-jdk-alpine  AS build
        WORKDIR /workspace/app
        COPY mvnw .
        COPY .mvn .mvn
        COPY pom.xml .
        COPY src src
        RUN ./mvnw install -DskipTests
        RUN mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)
        RUN mkdir -p target/extracted && java -Djarmode=layertools -jar target/*.jar extract --destination target/extracted
        FROM paketobuildpacks/graalvm:latest
        VOLUME /tmp
        ARG EXTRACTED=/workspace/app/target/extracted
        COPY --from=build ${EXTRACTED}/dependencies/ ./
        COPY --from=build ${EXTRACTED}/spring-boot-loader/ ./
        COPY --from=build ${EXTRACTED}/snapshot-dependencies/ ./
        COPY --from=build ${EXTRACTED}/application/ ./
        ENV APP_PORT=${{ inputs.service-port }}
        ENV VERSION=${{ inputs.service }}-${{ inputs.version || env.COMMIT_SHA }}
        EXPOSE ${{ inputs.service-port }}
        ENTRYPOINT ["java", "org.springframework.boot.loader.JarLauncher"]
        EOF
    - name: Build docker image
      run: ls -lah