env:
  ARTIFACT_DIR: .out/build/${{ inputs.environment }}
  DOCKER_FILE: .out/build/${{ inputs.environment }}/Dockerfile
  NGINX_CONF: .out/build/${{ inputs.environment }}/nginx.conf
  ENV_FILE: .out/build/${{ inputs.environment }}/.env
on:
  workflow_call:
    inputs:
      tag: 
        required: false
        type: string
        default: ${{github.sha}}
      portal: 
        required: true
        type: string
      portal-port: 
        required: false
        type: string
        default: ${{ vars.PORTAL_PORT || '80' }}
      dockerhub-repo: 
        required: false
        type: string
        default: 'obrs-${{ inputs.portal }}-portal'
      environment: 
        required: false
        type: string
        default: ${{ vars.BUILD_ENV || 'develop' }}
      node-version: 
        required: false
        type: string
        default: ${{ vars.NODE_VERSION || 'v16.3.0' }}
jobs:
  vite:
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Package Cache
        id: npm-package-cache
        uses: actions/cache@v3
        with:
          key: package-${{ github.sha }}
          path: ${{ env.ARTIFACT_DIR }}
      - name: Restore Build Cache
        id: npm-build-cache
        if: steps.npm-package-cache.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v3
        with:
          key: build-${{ github.sha }}
          path: ./dist
      - name: Prepare ${{ inputs.portal }} artifact output dir
        if: steps.npm-package-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          cp -r dist ${{ env.ARTIFACT_DIR }}
      - name: Write config files
        if: steps.npm-package-cache.outputs.cache-hit != 'true'
        run: |
          cat <<EOF > ${{ env.NGINX_CONF }}
          server {
            listen    80;
            server_name localhost;

            #charset koi8-r;
            #access_log /var/log/nginx/host.access.log main;

            location / {
              root  /usr/share/nginx/html;
            try_files $uri /index.html;
              #index index.html index.htm;
            }
          }
          EOF
      - name: Write Dockerfile
        if: steps.npm-package-cache.outputs.cache-hit != 'true'
        run: |
          cat <<EOF > ${{ env.DOCKER_FILE }} 
          FROM nginx:stable-alpine
          COPY dist/ /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          ENV VERSION=${{ github.sha }}
          EXPOSE ${{ inputs.portal-port }}
          CMD ["nginx", "-g", "daemon off;"]
          EOF
      - name: Set docker branch tag
        run: |
          echo "GITHUB_SHA_SHORT=`git rev-parse --short ${{ github.sha }}`" >> $GITHUB_ENV
          echo "BUILD_TAG=${{ inputs.tag }}" >> $GITHUB_ENV
          if [ "${{ github.ref }}" != "refs/heads/ifas-dev" ]; then
            echo "BUILD_TAG=dev" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" != "refs/heads/ifas-stg" ]; then
            echo "BUILD_TAG=stg" >> $GITHUB_ENV
          fi
      - name: Set dev tag
        if: github.base_ref
        run: |
          echo "GITHUB_SHA_SHORT=`git rev-parse --short ${{ github.sha }}`" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER || 'govnetservices' }}
          password: ${{ secrets.DOCKERHUB_TOKEN || 'dckr_pat_TLq0t2oN4tqcYXtMXghD_sozOog' }}
      - name: Build and push docker image
        uses: docker/build-push-action@v4
        env: 
          DOCKERHUB_REPO: ${{ vars.DOCKERHUB_ORG || 'govnetservices' }}/${{ inputs.dockerhub-repo }}
        with:
          context: ${{ env.ARTIFACT_DIR }}
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
            ${{ env.DOCKERHUB_REPO }}:${{ env.BUILD_TAG }}
            ${{ env.DOCKERHUB_REPO }}:${{ env.GITHUB_SHA_SHORT }}
            ${{ env.DOCKERHUB_REPO }}:latest